:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body {
  margin: 0;
  min-width: 320px;
  min-height: 100vh;
}


/*#app {*/
/*  display: flex;*/
/*  flex-direction: column;*/
/*  align-items: center;*/
/*}*/

.item {
  padding: 5px;
  font-size: 20px;
  color: black;
  background-color: #4ee570;
  border: 1px solid black;
}

.box {
  display: grid;
  margin-bottom: 40px;
  background-color: #666666;

  /* сколько раз напишешь, столько и будет колонок, например: 20рх, 20рх, 30рх, 40рх - 4 колонки и т.д.: */
  /*grid-template-columns: 300px 200px;*/

  /* значения могут быть в различных величинах, не только в пикселях.
  auto - не значит что всё станет пиксель в пиксель ровно и пропорционально как нам надо: */
  /*grid-template-columns: 25% 25% auto auto;*/

  /* fr - уникальная единица для grid, позволяющая распределить колонки так, как нам надо (пропорционально): */
  /*grid-template-columns: 2fr 1fr 1fr;*/

  /* repeat(х, у) специальная функция, где первый аргумент кол-во повторений, а второй кол-во того что нужно повторить: */
  /*grid-template-columns: repeat(3, 1fr);*/

  /* это уже кол-во рядов: */
  /*grid-template-rows: repeat(3, 100px);*/

  /* сокращённая запись колонки / ряды */
  grid-template: repeat(3, 1fr) / repeat(3, 100px);

  /* расстояние между колонками и рядами:*/
  /*column-gap: 20px;*/
  /*row-gap: 30px;*/

  /* сокращённая запись, где первое число - расстояние между рядами, второе - между колонками:*/
  /*gap: 30px 20px;*/

  /* общая запись */
  gap: 20px;
}

.item-1 {
  background-color: #d5d354;
  /* если мы хотим, что бы определенный элемент занимал определённое кол-во колонок*/
  /*grid-column-start: span 2;*/

  /* если мы хотим, что бы определенный элемент занимал определённое кол-во рядов*/
  /*grid-row-start: span 2;*/

  /* в данном примере можно указать кокретному элементу его расположение, исходя из принципа "Сетки":
   у сетки исеются вертикальные и горизонтальные линии, columns и rows */
  /*grid-column-start: 2;*/
  /*grid-column-end: 4;*/

  /*grid-row-start: 1;*/
  /*grid-row-end: 3;*/

  /* сокращённая запись вышенаписанного */
  /*grid-column: 2/4;*/
  /*grid-row: 1/3;*/

  /*grid-column: 2/4;*/
  /*grid-row: 2/2 span;*/

  /* у сетки есть противоположные линии, например -1 и -4, расположение элемента можно сделать и там */
  /*grid-column: -1/-3;*/
  /*grid-row: -1/-2;*/
}

/* линии сетки можно называть своими именами */
/*.box {*/
/*  grid-template-columns: [one] 200px [two] 200px [three] 200px [four];*/
/*}*/

/*и обращаться к ним*/
.item-1 {
  grid-column: 1 / 3;
  grid-row: 1 / span 2;
}

/* minmax(х, у) употребляется для адаптива, где х - минимальная ширина/высота, у - максимальная*/
.box {
  grid-template-columns: 150px 150px 150px minmax(120px, 200px);
}


